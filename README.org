#+TITLE: Python Gemini REPL
#+AUTHOR: Gemini REPL Project
#+DATE: 2025-01-17

[[https://img.shields.io/badge/version-0.1.0-blue.svg]]
[[https://img.shields.io/badge/python-3.11+-blue.svg]]
[[https://img.shields.io/badge/license-MIT-green.svg]]
[[https://img.shields.io/badge/status-experimental-orange.svg]]
[[https://img.shields.io/badge/purpose-educational-yellow.svg]]

* Overview

A self-hosting Python REPL with Gemini AI integration, featuring conversation context, tool use, and logging.

#+begin_example
$ gmake repl

╔══════════════════════════════════════╗
║      🌟 Gemini REPL v0.1.0 🌟        ║
║  Python-powered AI conversations     ║
║  Type /help for available commands   ║
╚══════════════════════════════════════╝

Session ID: fefc1b4b-57d3-4778-bd5c-c60c87d3562a

> What files are in the src directory?

🔧 Using tool: list_files
📂 Directory: src/
  - gemini_repl/ (directory)

The src directory contains one subdirectory called gemini_repl/.

> Read the Makefile and explain the main targets

🔧 Using tool: read_file
📄 Reading: Makefile

The Makefile includes these main targets:
- `help`: Shows available commands (default)
- `setup`: Installs dependencies and sets up environment
- `test`: Runs the test suite with coverage
- `lint`: Runs code quality checks
- `repl`: Launches the Gemini REPL

> /exit
#+end_example

** Recent Improvements (2025-07-20)

- *Fixed Tool Chaining*: The AI now automatically executes multiple tools to complete complex queries
- *System Prompts*: Added automatic system prompts that guide the AI to use tools proactively
- *Rate Limiting*: Visual countdown prevents API exhaustion with per-model limits

** Features

- ✅ *Interactive REPL* - Command-line interface with slash commands
- ✅ *AI Integration* - Conversational interface powered by Gemini
- ✅ *Tool System* - File operations (read, write, list)
- ✅ *Session Management* - Persistent conversations with resumption
- ✅ *Rate Limiting* - Visual feedback to avoid API limits
- ✅ *Logging System* - Comprehensive JSON logging

* Installation

** Prerequisites

- Python 3.11+
- uv (for dependency management)
- Emacs (for org-mode tangling)

** Setup

1. Clone and setup:
   #+begin_src bash
   make setup
   source .venv/bin/activate
   #+end_src

2. Configure environment:
   #+begin_src bash
   # Edit .env and add your GEMINI_API_KEY
   # Get your API key from: https://aistudio.google.com/app/apikey
   #+end_src

3. Run the REPL:
   #+begin_src bash
   make run
   # or
   python -m gemini_repl
   #+end_src

* Usage

** Basic Commands

- Type messages normally to chat with Gemini
- Use ~/help~ for available commands
- Use ~/exit~ or Ctrl-D to quit

** Slash Commands

| Command | Description |
|---------+-------------|
| ~/help~ | Show available commands |
| ~/clear~ | Clear conversation context |
| ~/save [filename]~ | Save conversation |
| ~/load <filename>~ | Load conversation |
| ~/context~ | Show conversation context |
| ~/stats~ | Display usage statistics |
| ~/tools~ | List available tools |
| ~/logs~ | Show recent logs |
| ~/restart~ | Restart the REPL |

** Tool Functions

The REPL includes built-in tools for file operations:
- ~read_file~ - Read file contents
- ~write_file~ - Create/update files
- ~list_files~ - List directory contents

* Educational Approach

This project demonstrates key concepts in building AI-powered developer tools:

** Learning Objectives

1. *Conversational AI Integration* - Connect to and use the Gemini API
2. *Tool-Based Systems* - Implement function calling for AI agents  
3. *Context Management* - Maintain conversation state across sessions
4. *Rate Limiting* - Handle API quotas gracefully with visual feedback
5. *Security Considerations* - Path validation and sandboxing

** Known Limitations

- Tool dispatch is inconsistent (see issue #26)
- The AI may not always use tools when expected
- This is an experimental system for learning

** Teaching Resources

- [[https://ai.google.dev/gemini-api/docs][Gemini API Documentation]]
- [[https://github.com/aygp-dr/gemini-repl-005/issues][Project Issues]] - Real challenges and solutions
- [[./experiments/][Experiments Directory]] - Test scripts and explorations

* Development

** Project Structure

#+begin_example
gemini-repl-005/
├── src/gemini_repl/
│   ├── core/
│   │   ├── repl.py        # Main REPL loop
│   │   └── api_client.py  # Gemini API wrapper
│   ├── utils/
│   │   ├── context.py     # Context management
│   │   └── logger.py      # Logging system
│   └── tools/
│       └── tool_system.py # Tool execution
├── tests/                 # Test suite
├── scripts/               # Development scripts
├── .ai/                   # AI context files
└── PYTHON-GEMINI-REPL.org # Literate source
#+end_example

** Building from Source

The project uses org-mode literate programming:

#+begin_src bash
# Extract code from org files
make tangle

# Run tests
make test

# Run linter
make lint
#+end_src

** Key Files for Learning

- ~src/gemini_repl/core/api_client.py~ - Gemini API integration
- ~src/gemini_repl/tools/codebase_tools.py~ - Tool implementations
- ~src/gemini_repl/utils/rate_limiter.py~ - Rate limiting example
- ~experiments/tool-calling/~ - Tool dispatch experiments

** Contributing

1. Fork and experiment freely
2. Try fixing issue #26 (tool dispatch)
3. Add your own tools
4. Share what you learn

* License

MIT License - See LICENSE file for details
